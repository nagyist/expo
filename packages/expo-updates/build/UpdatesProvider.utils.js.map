{"version":3,"file":"UpdatesProvider.utils.js","sourceRoot":"","sources":["../src/UpdatesProvider.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Updates from './Updates';\nimport type { Manifest, UpdateEvent } from './Updates.types';\nimport { UpdatesProviderEventType, currentlyRunning } from './UpdatesProvider.constants';\nimport type { UpdatesInfo, UpdatesProviderEvent } from './UpdatesProvider.types';\n\n/////// Internal functions ////////\n\n// Promise wrapper for setTimeout()\nexport const delay = (timeout: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout);\n  });\n};\n\n// Constructs the availableUpdate from the update manifest\nexport const availableUpdateFromManifest = (manifest: Partial<Manifest> | undefined) => {\n  return manifest\n    ? {\n        updateId: manifest?.id ? manifest?.id : null,\n        createdAt: manifest?.createdAt ? new Date(manifest?.createdAt) : null,\n        manifest,\n      }\n    : undefined;\n};\n\n// Constructs the UpdatesInfo from an event\nexport const updatesInfoFromEvent = (event: UpdateEvent): UpdatesInfo => {\n  const lastCheckForUpdateTime = new Date();\n  if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n    return {\n      currentlyRunning,\n      lastCheckForUpdateTime,\n    };\n  } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n    return {\n      currentlyRunning,\n      availableUpdate: availableUpdateFromManifest(event.manifest),\n      lastCheckForUpdateTime,\n    };\n  } else {\n    // event type === ERROR\n    return {\n      currentlyRunning,\n      error: new Error(event.message),\n      lastCheckForUpdateTime,\n    };\n  }\n};\n\n// Implementation of checkForUpdate\nexport const checkForUpdateAndReturnNewUpdatesInfoAsync: (\n  updatesInfo: UpdatesInfo,\n  providerEventHandler?: (event: UpdatesProviderEvent) => void\n) => Promise<UpdatesInfo> = async (updatesInfo, providerEventHandler) => {\n  try {\n    providerEventHandler && providerEventHandler({ type: UpdatesProviderEventType.CHECK_START });\n    const checkResult = await Updates.checkForUpdateAsync();\n    providerEventHandler && providerEventHandler({ type: UpdatesProviderEventType.CHECK_COMPLETE });\n    const lastCheckForUpdateTime = new Date();\n    if (checkResult.isAvailable) {\n      return {\n        ...updatesInfo,\n        availableUpdate: availableUpdateFromManifest(checkResult.manifest),\n        lastCheckForUpdateTime,\n      };\n    } else {\n      return {\n        ...updatesInfo,\n        lastCheckForUpdateTime,\n      };\n    }\n  } catch (error: any) {\n    const lastCheckForUpdateTime = new Date();\n    providerEventHandler && providerEventHandler({ type: UpdatesProviderEventType.CHECK_ERROR });\n    return {\n      ...updatesInfo,\n      lastCheckForUpdateTime,\n      error,\n    };\n  }\n};\n\n// Implementation of downloadUpdate\nexport const downloadUpdateAsync = async (\n  providerEventHandler?: (event: UpdatesProviderEvent) => void\n) => {\n  try {\n    providerEventHandler && providerEventHandler({ type: UpdatesProviderEventType.DOWNLOAD_START });\n    await Updates.fetchUpdateAsync();\n    providerEventHandler &&\n      providerEventHandler({ type: UpdatesProviderEventType.DOWNLOAD_COMPLETE });\n    return null;\n  } catch (error: any) {\n    providerEventHandler &&\n      providerEventHandler({ type: UpdatesProviderEventType.DOWNLOAD_ERROR, error });\n    return error;\n  }\n};\n\n// Implementation of runUpdate\nexport const runUpdateAsync = async (\n  providerEventHandler?: (event: UpdatesProviderEvent) => void\n) => {\n  try {\n    providerEventHandler && providerEventHandler({ type: UpdatesProviderEventType.RUN_START });\n    await Updates.reloadAsync();\n    return null;\n  } catch (error: any) {\n    providerEventHandler &&\n      providerEventHandler({ type: UpdatesProviderEventType.RUN_ERROR, error });\n    return error;\n  }\n};\n\n// Implementation of downloadAndRunUpdate\nexport const downloadAndRunUpdateAsync = async (\n  providerEventHandler?: (event: UpdatesProviderEvent) => void\n) => {\n  const error = await downloadUpdateAsync(providerEventHandler);\n  if (error) {\n    return error;\n  }\n  return await runUpdateAsync(providerEventHandler);\n};\n"]}